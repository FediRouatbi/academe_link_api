generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  user_id        Int              @id @default(autoincrement())
  user_name      String           @unique()
  email          String           @unique()
  password_hash  String?
  first_name     String
  last_name      String
  roles_on_users roles_on_users[]
  createdAt      DateTime         @default(now())
  puat           DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  student        student?
  teacher        teacher?
  topic          topic[]
}

model student {
  student_id Int @id @default(autoincrement())

  user    user @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id Int  @unique

  classroom    classroom? @relation(fields: [classroom_id], references: [classroom_id])
  classroom_id Int?
}

model teacher {
  teacher_id       Int                @id @default(autoincrement())
  user             user               @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id          Int                @unique
  teacherClassroom teacherClassroom[]
  subject          subject[]
}

model subject {
  subject_id   Int    @id @default(autoincrement())
  subject_name String

  teacher    teacher? @relation(fields: [teacher_id], references: [user_id])
  teacher_id Int

  classroom    classroom? @relation(fields: [classroom_id], references: [classroom_id])
  classroom_id Int
  topic        topic[]
}

model classroom {
  classroom_id   Int    @id @default(autoincrement())
  classroom_name String @unique

  subject subject[]
  student student[]

  teacherClassroom teacherClassroom[]
  createdAt        DateTime           @default(now())
  topic            topic[]
}

model teacherClassroom {
  classroom    classroom @relation(fields: [classroom_id], references: [classroom_id])
  classroom_id Int

  teacher    teacher @relation(fields: [teacher_id], references: [teacher_id], onDelete: Cascade)
  teacher_id Int

  @@id([classroom_id, teacher_id])
}

model topic {
  topic_id Int  @id @default(autoincrement())
  
  content String

  user     user @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id  Int

  classroom    classroom? @relation(fields: [classroom_id], references: [classroom_id])
  classroom_id Int?
  subject      subject?   @relation(fields: [subject_id], references: [subject_id])
  subject_id   Int?
}

model role {
  role_id        Int              @id @default(autoincrement())
  name           String
  role_code      RoleCodeEnum     @unique
  roles_on_users roles_on_users[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model roles_on_users {
  user      user                 @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id   Int
  role      role                 @relation(fields: [role_id], references: [role_id], onDelete: Cascade)
  role_id   Int
  status    RoleOnUserStatusEnum
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt

  @@id([user_id, role_id])
}

enum RoleCodeEnum {
  ADMIN
  TEACHER
  STUDENT
}

enum RoleOnUserStatusEnum {
  ACTIVE
  BLOCKED
}
